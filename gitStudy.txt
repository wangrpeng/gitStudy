git 常用命令:

创建版本库
git init :将当前目录变成Git可以管理的仓库,会在当前目录下生成一个.git文件(该文件默认隐藏,不要修改该文件),

提交文件到仓库
git add readme.txt :将文件添加到仓库,先添加,再提交.
git commit -m "wrote a readme file" :把文件提交到仓库.

版本回退:
git status :查看仓库的状态
git diff readme.txt :查看readme.txt文件跟仓库最新版本相比,做了什么修改.
git log :查看提交历史,或者 git log --pretty=oneline,
git reset --hard HEAD^  :将文件回退到上一个版本,HEAD代表最新版本,
git reset --hard "commit id":回退到我们指定的版本.id只需要写前面几位就可以了.
git reflog :记录你的每一次命令.


Here is an illustration, by Jon Loeliger. Both commit nodes B and C are parents of commit node A. Parent commits are ordered left-to-right.
G   H   I   J
 \ /     \ /
  D   E   F
   \  |  / \
    \ | /   |
     \|/    |
      B     C
       \   /
        \ /
         A

A =      = A^0
B = A^   = A^1     = A~1
C = A^2  = A^2
D = A^^  = A^1^1   = A~2
E = B^2  = A^^2
F = B^3  = A^^3
G = A^^^ = A^1^1^1 = A~3
H = D^2  = B^^2    = A^^^2  = A~2^2
I = F^   = B^3^    = A^^3^
J = F^2  = B^3^2   = A^^3^2





工作区和暂存区:
例如GitStudy文件夹,就是一个工作区.
工作区有一个隐藏的.git目录,这个不算工作区,而是Git的版本库.
Git的版本库里存了很多东西,其中最重要的就是称为 stage(或者叫index) 的暂存区,
还有Git为我们自动创建的第一个分支 master,以及指向master的一个指针 HEAD.
我们把文件往Git版本库添加的时候,分两步:
git add :就是把文件修改添加到暂存区,
git commit :提交更改,实际上就是把暂存区的所有内容提交到当前分支.


管理修改:
Git与其他版本控制系统设计的优秀,应为Git跟踪并管理的是修改,而非文件.


撤销修改:
如果发现之前编写代码的有错误
git checkout -- readme.txt :把readme.txt文件在工作区的修改全部撤销,这里有两种情况:
之一:readme.txt自修改后还没有放到缓存区,现在,撤销修改就回到和版本库一模一样的状态;
之二:readme.txt已经添加到暂存区,又做了修改,现在,撤销修改就回到添加到暂存区后的状态.
总之,就是让这个文件回到最近一次git commit 或 git add 时的状态.

如果错误文件已经git add了, 执行
git reset HEAD readme.txt :可以把暂存区的修改撤撤销掉(unstage),重新回到工作区.
再执行:
get checkout --readme.txt :就可以丢弃工作的修改.




删除文件:
一般情况下,通过文件管理器删除了文件.
rm test.txt
我们可以执行:
git checkout -- test.txt :找回文件.
如果我们想删除版本库的该文件:
git rm test.txt
git commit -m "remove test.txt"







添加远程仓库:我们把github作为远程仓库.
创建SSH Key:
ssh-keygen -t rsa -C "youremail@example.com" (github注册邮箱 812855630@qq.com)
将公钥添加到github账号
测试 ssh -T git@github.com 通过ssh是否可以连接到github服务器


把本地仓库的内容推送到GitHub仓库 ,远程库的名字就是origin，这是Git默认的叫法
git remote add origin git@github.com:wangrpeng/gitStudy.git
下一步，就可以把本地库的所有内容推送到远程库上：
git push -u origin master
从现在起，只要本地作了提交，就可以通过命令
git push origin master


一般情况下,我们是先有远程仓库,然后clone代码到本地,
git clone git@github.com:wangrpeng/gitStudy.git

注意到，GitHub给出的地址不止一个，还可以用
https://github.com/wangrpeng/gitStudy/gitStudy.git
实际上，Git支持多种协议，默认的git://使用ssh，但也可以使用https等其他协议






分支管理:
创建与删除分支:
git checkout -b dev :在当前分支上(一般是master分之) ,创建dev分支,然后切换到dev分支
这条命令相当于:
git branch dev 	: 创建dev分支
git checkout dev :切换到dev分支

git branch :查看当前分支

我们再dev分支上完成开发工作,然后合并到master分支操作步骤:

步骤一:在dev分支上完成开发工作并提交到dev分支
git add readme.txt
git commit -m "dev readme.txt"
步骤二:切换到master分支,然后合并dev分支
git checkout master
git merge dev
步骤三:如果开发任务完成,我们可以删除dev分支
git branch -d dev




解决冲突:
当合并分支时,对同一个地方做了不同的修改,容易引起冲突,收到解决冲突再合并.
git log --graph --pretty=oneline --abbrev-commit :可以查看分支合并情况.





分支管理策略:
分支合并时,Git会用Fast formward模式,但这种模式下,删除分支后,会丢掉分支信息.
如果要强制禁用Fast forwar模式,Git就会在merge时生成一个新的commit,这样,从分支历史上
就可以看出分支信息. --no-ff 方式git merge练习:
git checkout -b dev
git add readme.txt
git commit -m "develope"
git checkout master
用--no-ff方式合并,这样会创建一个新的commit
git merge --no-ff -m "merge with no--ff" dev




bug分支:
软件开发中,有bug需要修复,所以每个bug都可以通过一个新的临时分支来修复,修复后,在合并分支,然后删除临时分支.
当你的开发工作进行到一半,还不能提交,此时来了一个bug需要优先处理.Git提供了stash功能,可以把工作现场
储存起来,等以后恢复现场后继续工作.
git stash :将工作现场储存起来.
git status :此时的工作空间是干净的.

修复bug步骤
git checkout master
git checkout -b issue-101
git add readme.txt
git commit -m "issue-101 bug fixed"
git checkout master
git merge --no-ff -m "merge bug fix 101" issue-101
git branch -d iisue-101

现在我们的101bug修复了,可以接着dev分支继承工作了.
git checkout dev
git stash list :查看我们刚刚保存的工作现场.
恢复工作现场有两种方法:
之一:git stash apply :这种方法恢复后,stash内容并不删除,需要执行git stash drop 来删除.
之二:git stash pop :恢复同时把stash内容也删除了.

我们可以多次stash,恢复时候,新执行git stash list 查看,然后恢复到指定的 stash
git stash apply stash@{0}





Feature分支.
软件开发中,总有无穷无尽的新功能不断的添加进来.
添加一个新功能时,我们最好在dev分支上 新建一个feature分支(不要让试验性的代码把dev分支搞乱了),
在feature分支开发.

现在接到一个新任务,开发代号 vulcan
git checkout -b feature-vulcan
git add readme.txt
git commit -m "develope vulcan"

git checkout dev
下一步,就要合并了,这时客户说这个功能又不要了...所有不需要合并,还有删除feature分支

git branch -d feature-vulcan 
销毁失败,因为feature-vulcan分支还没有合并,我们强行删除:
git branch -D feature-vulcan





多人协作:
当你从远程仓库克隆时,Git自动把本地的master分支和远程的master分支对应起来了,并且,远程仓库
默认名称是 origin  查看远程仓库信息,
git remote :origin
git remote -v :显示远程仓库详细信息


推送分支
就是把该分支上所有的本地提交推送到远程仓库.推送时,要指定本地分支,这样,Git就会把该分支推送到
远程仓库对应的远程分支上了.
git push origin master :推送master分支
git push origin dev :推送dev分支



抓取分支
多人协作是,大家都会在master和dev分支上推送各自的修改.
现在模拟一个你的小伙伴,可以在另外一台电脑上(注意要把SSH Key添加到GitHub)或者同一台电脑另外一个目录下克隆
git clone git@github.com:wangrpeng/gitStudy.git
当从远程仓库clone,默认情况下,本地只有master分支,
现在需要在dev分支上开发,就必须创建远程origin的dev到本地,
git checkout -b dev origin/dev
现在就可以在本地dev分支上继续修改,然后时不时把本地dev分支push到远程dev
不巧的是,其他人修改了相同的文件,冲突了! 很简单,先git pull把最新的提交从origin/dev抓取下来,合并后push.
执行 git pull  失败了!,原因是没有指定本地dev分支与远程origin/dev分支的链接,设置dev 和origin/dev的链接:
git branch --set-upstream dev origin/dev
再执行 git pull,此时成功了.手动解决冲突,然后push


因此，多人协作的工作模式通常是这样：

首先，可以试图用git push origin branch-name推送自己的修改；

如果推送失败，则因为远程分支比你的本地更新，需要先用git pull试图合并；

如果合并有冲突，则解决冲突，并在本地提交；

没有冲突或者解决掉冲突后，再用git push origin branch-name推送就能成功！

如果git pull提示“no tracking information”，则说明本地分支和远程分支的链接关系没有创建，用命令git branch --set-upstream branch-name origin/branch-name。

这就是多人协作的工作模式，一旦熟悉了，就非常简单。






忽略特殊文件,有的文件不要让git版本控制.
添加 .gitignore 文件,配置需要忽略的文件.

忽略某些文件时，需要编写.gitignore；
.gitignore文件本身要放到版本库里，并且可以对.gitignore做版本管理！

































